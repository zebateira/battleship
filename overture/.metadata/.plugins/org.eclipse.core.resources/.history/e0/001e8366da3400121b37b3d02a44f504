class Tree2
	types
		public edge:: no1: nat1 
     		no2: nat1;
	values
-- TODO Define values here
	instance variables
		public Root : nat1:=0; 
		 public Edges : set of edge := {};
		 --inv2
		 inv exists e in set Edges & e.no1=Root or e.no2=Root;
		 --inv4
		 inv {p | e in set Edges, p=e.no2}\{p1 | e in set Edges, p1=e.no1};
		 
		 
--inv1 Uma árvore com n nós tem n-1 arestas (grafo acíclico).  
--inv2 A raíz da árvore (Root) tem que ser um nó da árvore. 
--inv3 A árvore tem que ser conexa. 
--inv4 A árvore é balanceada (folhas a uma distância d ou d+1 da raíz) 
--inv5 entre dois nós arbitrários da árvore existe um único caminho. 

	
	operations
-- TODO Define operations here
	functions
-- TODO Define functiones here
	traces
-- TODO Define Combinatorial Test Traces here
end Tree2