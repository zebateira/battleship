class Board
	types
		public Houses = set of House;
	values
	instance variables
		public size: int := 10;
		public playable: bool;
		public houses: Houses := {};
		--public ships: seq of Ship := nil;
		inv card(houses) >= 1;
		inv size >= 1;
		
	operations
	
		public Board : Houses ==> Board
			Board(h) == 
			(	
				houses := h;
				
				for all h1 in set houses do h1.setBoard(self);
			)
		post card(houses) = size*size;
		
		public Board: Houses * bool ==> Board
			Board(h, t) == 
			(
				playable := t;
				houses := h;
				
				for all h1 in set houses do h1.setBoard(self);
			)
		post card(houses) = size*size;
		
		public Board : int * bool * Houses ==> Board
			Board (s, t, h) == 
			(
				size := s;
				playable := t;
				houses := h;
				
				for all h1 in set houses do h1.setBoard(self);
			)
		post card(houses) = size*size;
		
		-- returns:
		--0 => miss or already hit
		--1 => hit
		--2 => ship sunk
		public hit : seq of int ==> int
			hit(coords) ==
			(
				let h in set houses be st h.x = coords(1) and h.y = coords(2) in (
					if not h.hasShip or h.hit then return 0
					elseif h.hasShip then
						(
							h.ship.inc();
							if not h.ship.isDown() then return 1
							else return 2;
						)
					else return 0;
				);
			);
		
		public mark : seq of int * int ==> ()
			mark(coords, res) ==
			(
				let h in set houses be st h.x = coords(1) and h.y = coords(2) in (
					h.hit := true;
					if res = 1 or res = 2 then
						h.hasShip := true;
				);
			);							
end Board