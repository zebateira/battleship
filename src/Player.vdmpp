class Player
	types
		public String = VDMUtils`String;
		
-- TODO Define types here
	values
	-- size |-> number of ships of that size
		public sizes : map nat1 to nat1 = {2 |-> 4, 3|->3, 4|->2,5|->1};

	instance variables
		public name : String;
		public ships : seq of Ship;
		protected boardown : Board;
		protected boardplay : Board;
		
		inv len ships >= 1 and len ships <= 7;
		
	operations
	
		public Player : String * Board * Board==> Player
		Player(n, b1,b2) ==
		(
			dcl c : seq of Ship`coord, orientation:seq of int;
			name := n;
			boardown := b1;
			boardplay := b2;
			c := get_coord();
			orientation:=get_orientation();
			
			for all s in set dom sizes do
				for i = 1 to sizes(s) do
					ships := ships ^ [new Ship(c(i),orientation(i),s,boardown)];		
		);
		
		public get_coord: () ==> seq of Ship`coord
			get_coord() ==
			(
				return IO`freadval[seq of Ship`coord]("path").#2;
			);
		
		public get_orientation: () ==> seq of int
			get_orientation() ==
			(
				return IO`freadval[seq of int]("path").#2;
			);
			
		public play : int ==> Ship`coord
			play (bsize) ==
			(
				return [MATH`rand(bsize-1)] ^ [MATH`rand(bsize-1)]; 
			);
	
	functions
	traces
end Player