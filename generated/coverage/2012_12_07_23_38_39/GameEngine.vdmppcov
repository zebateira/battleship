class GameEngine
	types
	values
		public static PLAYER1 : int = 1;
		public static PLAYER2 : int = 2;
		
	instance variables
		public player1: Player;
		public player2: Player;
		public board1own : Board; -- Board of Player 1
		public board1play : Board; -- Board of Player 1 that represents the Player 2's Board
		public board2own : Board; -- Board of Player 2 
		public board2play : Board; -- Board of Player 2 that represents the Player 1's Board
		public activePlayer: int := PLAYER1; -- Current Player taking a shot
		public isGameOver : bool := false;
		
		inv activePlayer in set {PLAYER1, PLAYER2};

	operations
		public GameEngine : VDMUtil`String * bool * VDMUtil`String * bool ==> GameEngine
			GameEngine (player1name, isbot1, player2name, isbot2) ==
			(
				player1 := new Player(player1name, 1, isbot1);
				player2 := new Player(player2name, 2, isbot2);
				
				board1own := player1.boardown;
				board2own := player2.boardown;
				board1play := player1.boardplay;
				board2play := player2.boardplay;
			);

		public turn : () ==> int
			turn() == (
			
				if activePlayer = PLAYER1 then (
					let coords = player1.play() in
					(
						board1play.mark(coords, board2own.hit(coords));
						isGameOver := checkVictory(player2.ships);
						
						if isGameOver then return activePlayer;
						activePlayer := PLAYER2;
					)
				)
				elseif activePlayer = PLAYER2 then (
					let coords2 = player2.play() in
					(
						board2play.mark(coords2, board1own.hit(coords2));
						isGameOver := checkVictory(player1.ships);
						if isGameOver then return activePlayer;
						activePlayer := PLAYER1;
					)
				);
				
				return 0;
			);
		
		public checkVictory: seq of Ship ==> bool
			checkVictory (ships) ==
			(
				return forall s in set elems ships & s.isDown();	
			);
			
		public getPlayer : int ==> Player
			getPlayer(nr) ==
				let player in set {player1, player2} be st player.playerNumber = nr in (
						return player;
				);
				
		public getAllBoards : () ==> set of Board
			getAllBoards() ==
				return { board1own, board2own, board1play, board2play};
				
		-- start the game
		public let_the_slaughter_begin : bool ==> int
			let_the_slaughter_begin (debug) ==
			(
				dcl victorious : int := 0, loser : int := 0;
				
				if debug then CLI`printInit(player1, player2);
				
				while not isGameOver do
				(
					victorious := turn();
				);
				
				if victorious = PLAYER1 then loser := PLAYER2
				else loser := PLAYER1;
				
				if debug then (
					CLI`printBoards(getPlayer(victorious));
					CLI`printBoards(getPlayer(loser));
					
					CLI`printEnd(getPlayer(victorious));
				);
				
				return victorious;
			);
			
end GameEngine