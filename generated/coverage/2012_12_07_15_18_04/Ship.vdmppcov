class Ship
	types
		
	values
		
	instance variables
		public static ORIENTATION_UP : int := 0;
		public static ORIENTATION_RIGHT : int := 1;
		public static ORIENTATION_DOWN : int := 2;
		public static ORIENTATION_LEFT : int := 3;
		
		static orientations : map int to (seq of int) := {
			ORIENTATION_UP		|-> [ 0,-1],
			ORIENTATION_RIGHT	|-> [+1, 0],
			ORIENTATION_DOWN	|-> [ 0,+1],
			ORIENTATION_LEFT	|-> [-1, 0]
		};
	
		public static id : int := 0;
		public coord_init : House`coord;
		public coords : set of House`coord := {};
		public orientation : int := 1;
		public hits : int := 0;
		public size: int := 1;
		public board: Board;
		public my_id: int;
		
		inv orientation >= ORIENTATION_UP and orientation <= ORIENTATION_LEFT;
		inv len coord_init = 2;
		inv id >= 0;
		inv card(coords) >= 0 and card(coords) <= size;
	
	operations
	
	public Ship: House`coord * int * int * Board ==> Ship
	Ship(c,o,s,b) == 
	(
		coord_init := c;
		size := s;
		coords := {c};
		orientation := o;
		board := b;
		my_id := id +1;
		id := my_id;
		
		for i = 1 to size-1 do (	
			coords := coords union {[c(1)+orientations(o)(1)*i,c(2)+orientations(o)(2)*i]};
		);
		
	)
	pre	forall x in set {c(1),c(1)+orientations(o)(1)*(s-1)}, y in set {c(2),c(2)+orientations(o)(2)*(s-1)} &
			x >= 1 and x <= Board`boardSize and y >= 1 and y <= Board`boardSize
	post fill_houses();
	
		
	public fill_houses: ()==> bool
		fill_houses() ==
		(
			for all c in set coords do
			(
				let h in set board.houses be st h.x = c(1) and h.y = c(2) in
				(
					h.hasShip := true;
					h.ship := self;
				)
			);
			return true;
		)
	pre forall c in set coords &
		let h in set board.houses be st h.x = c(1) and h.y = c(2) in
		(
			not h.hasShip
		);

	public inc: () ==> ()
		inc() == hits := hits +1
	pre hits < size
	post hits <= size;
	
	public isDown : () ==> bool
		isDown() == return size = hits;
end Ship