class Board
	types
		public Houses = set of House;
	values
		public static boardSize: int = 10;
		
		public static MISS : int = 0;
		public static HIT : int = 1;
		public static SHIP_SUNK : int = 2;
	
	instance variables
		
		public playable: bool;
		public houses: Houses := {};
		
		inv card(houses) >= 1;
		inv boardSize >= 1;
		
	operations
	
		public Board: bool ==> Board
			Board(t) == 
			(
				playable := t;
				
				for all x in set {1, ..., boardSize}  do (
					for all y in set {1, ..., boardSize} do (
						houses := houses union {new House(x,y)};
					)
				);
				
				for all h1 in set houses do h1.setBoard(self);
			)
		post card(houses) = boardSize * boardSize;
		
		-- returns:
		--0 => miss or already hit
		--1 => hit
		--2 => ship sunk
		public hit : seq of int ==> int
			hit(coords) ==
			(
				let h in set houses be st (h.x = coords(House`X) and h.y = coords(House`Y)) in (
					if not h.hasShip or h.hit then return MISS
					elseif h.hasShip then
						(
							h.ship.inc();
							h.hit := true;
							if not h.ship.isDown() then return HIT
							else return SHIP_SUNK;
						)
					else return MISS;
				);
			)
			pre House`checkCoords(coords)			
			post RESULT in set {MISS, HIT, SHIP_SUNK};

		public mark : seq of int * int ==> ()
			mark(coords, res) ==
			(
				let h in set houses be st h.x = coords(House`X) and h.y = coords(House`Y) in (
					h.hit := true;
					if res = HIT or res = SHIP_SUNK then
						h.hasShip := true;
				);
			)
			pre House`checkCoords(coords);							
end Board