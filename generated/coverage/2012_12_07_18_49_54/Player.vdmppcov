class Player
	types
		
	values

	instance variables
		public static sizes : seq of int := [2, 2, 2, 2, 3, 3, 3, 4, 4, 5];
		
		public it : int := 0;
		public name : VDMUtils`String;
		public ships : seq of Ship;
		public boardown : Board;
		public boardplay : Board;
		public playerNumber : int;
		public coords2play : seq of House`coords;
		public isBot : bool;
		
		inv (len ships) <= len sizes;
		
	operations
	
		public Player : VDMUtils`String * int * bool ==> Player
		Player(n, number, isbot) ==
		(
			dcl c : seq of House`coords, orientation: seq of int,
				ship : Ship;
			
			name := n;
			playerNumber := number;
			isBot := isbot;
			boardown := new Board(false);
			boardplay := new Board(true);
			c := getShipsCoords();
			orientation := getShipsOrientations();
			
			if not isBot then coords2play := getCoords2Play();
			
			ships := [];
			
			for i = 1 to (len sizes) do (
				ship := new Ship(c(i),orientation(i),sizes(i),boardown);
				ships := ships ^ [ship];
			);
		);
		
		public getShipsCoords: ()  ==> seq of House`coords
			getShipsCoords() ==
			(
				return IO`freadval[seq of House`coords]("res/" ^ name ^ ".shipscoords").#2;
			)
			post forall coord in set elems RESULT &
					House`checkCoords(coord);
		
		public getShipsOrientations: () ==> seq of int
			getShipsOrientations() ==
			(
				return IO`freadval[seq of int]("res/" ^ name ^ ".orientations").#2;
			)
			post forall orientation in set elems RESULT &
				Ship`checkOrientation(orientation);
		
		public getCoords2Play: ()  ==> seq of House`coords
			getCoords2Play() ==
			(
				return IO`freadval[seq of House`coords]("res/" ^ name ^ ".coords2play").#2;
			)
			post forall coord in set elems RESULT &
					House`checkCoords(coord);

		public play : () ==> House`coords
			play () ==
			(
				dcl coords : House`coords;
				
				if isBot then coords := bot_genCoords()
				else (
					coords := coords2play(1);
					coords2play := tl coords2play 
				);
				
				return coords;
			);

		public bot_genCoords : () ==> House`coords
			bot_genCoords() ==
			(
				dcl x : int := it - (it div 10) * 10 +1,
					y : int := (it div 10) +1;
				
				it := it + 1;
				
				return [x] ^ [y];
			)
			pre it <= 100
			post House`checkCoords(RESULT);

end Player